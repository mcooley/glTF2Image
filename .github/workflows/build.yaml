name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-22.04]
        build_type: [release, debug]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'true'

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.x'

    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: choco install ninja

    - name: Configure MSVC build environment (Windows)
      uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756 # Pinned to 1.13.0
      if: runner.os == 'Windows'

    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install -y cmake clang libc++-14-dev libc++abi-14-dev ninja-build

    - name: Run native/build-native.py
      run: python native/build-native.py ${{ matrix.build_type }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.os }}-${{ matrix.build_type }}
        path: |
          native/out

    - name: Run GLTF2Image.Tests
      run: dotnet test -c ${{ matrix.build_type == 'debug' && 'Debug' || 'Release' }} managed/GLTF2Image.Tests/GLTF2Image.Tests.csproj

  package:
    needs: build
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.x'

    - name: Download build artifacts (windows-latest-release)
      uses: actions/download-artifact@v4
      with:
        name: build-windows-latest-release
        path: native/out

    - name: Download build artifacts (ubuntu-22.04-release)
      uses: actions/download-artifact@v4
      with:
        name: build-ubuntu-22.04-release
        path: native/out

    - name: Extract version from tag
      id: extract_version
      if: github.event_name == 'release'
      run: |
        VERSION=${{ github.event.release.tag_name }}
        VERSION=${VERSION#v}
        echo "::set-output name=version::$VERSION"

    - name: Set version to 0.0.0
      id: default_version
      if: github.event_name != 'release'
      run: echo "::set-output name=version::0.0.0"

    - name: Build NuGet package
      run: dotnet build -c Release managed/GLTF2Image/GLTF2Image.csproj /p:Version=${{ steps.extract_version.outputs.version || steps.default_version.outputs.version }} /p:GLTF2ImageRequireAllPlatforms=true

    - name: Upload NuGet package to build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        path: managed/GLTF2Image/bin/Release/*.nupkg

    - name: Upload NuGet package to release
      if: github.event_name == 'release'
      run: gh release upload ${{ github.event.release.tag_name }} managed/GLTF2Image/bin/Release/*.nupkg
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
